openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.11
servers:
  - url: https://blog.swagger.io/api/v3
tags:
  - name: users
    description: users API
paths:
  /users/signup:
    post:
      tags:
        - users
      summary: User create account
      description: Create account for user
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  name:
                    type: string
                    example: test
                  email:
                    type: string
                    example: test@email.com
                  password:
                    type: string
                    example: '12345'
                  phone:
                    type: string
                    example: '84156985110'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSignUp'        
        '400':
          description: Failed Request
  
  /users/login:
    post:
      tags:
        - users
      summary: User login account
      description: After the user successfully creates an account, they can use the newly created email and password to login
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
                    example: test@email.com
                  password:
                    type: string
                    example: '12345'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersLogin'          
        '400':
          description: Failed Request
  /users/updateUser/{userID}:
    put:
      tags:
        - users
      summary: Update User Account
      description: User edits profile account.
      parameters:
        - name: userID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  name: 
                    type: string
                    example: 'Dung'
                  bio:
                    type: string
                    example: 'Toi la tac gia'
                  birthday:
                    type: string
                    example: '2003-02-17'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersUpdate'        
        '400':
          description: Failed Update

  /posts/create:
    post:
      tags:
        - posts
      summary: Create post
      description: Admin create post and up blog
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  title:
                    type: string
                    example: IT
                  cover:
                    type: string
                    example: logo.jpg
                  short_description:
                    type: string
                    example: IT la vua cua moi nghe
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'        
        '400':
          description: Failed Request
  
  /posts/getPostByID/{postID}:
    get:
      tags:
        - posts
      summary: Find post by ID
      description: Returns a single post
      parameters:
        - name: postID
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'          
        '400':
          description: Find not found
      security:
        - api_key: []

  /posts/getPost?page=number:
    get:
      tags:
        - posts
      summary: Get a list of blog post
      description: Returns a list of blog posts, including pagination info such as total posts, current page, and the list of posts.
      parameters:
        - name: page
          in: query
          description: The page number to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageNumber' 
        '400':
          description: Find not found
      security:
        - api_key: []
  /posts/updatePost/{postID}:
    put:
      tags:
        - posts
      summary: Update a blog post
      description: ''
      operationId: Updates the information of a blog post based on the provided post ID
      parameters:
        - name: postID
          in: path
          description: The ID of the post to update
          required: true
          schema:
            type: string
            example: "641ec5b5e3c4b2a456aa01f9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the blog post
                  example: "Updated Blog Post Title"
                content:
                  type: string
                  description: The content of the blog post
                  example: "This is the updated content of the blog post."
                cover:
                  type: string
                  description: URL or path to the cover image
                  example: "react.png"
                tags:
                  type: array
                  items:
                    type: string
                  description: List of tags associated with the blog post
                  example: ["React", "JavaScript", "Programming"]
                short_description:
                  type: string
                  description: Short description of the blog post
                  example: "This is an updated short description."
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatePost'
                
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /post/order:
    post:
      tags:
        - posts
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/posts'
          application/xml:
            schema:
              $ref: '#/components/schemas/posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/posts'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                $ref: '#/components/schemas/posts'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
          application/xml:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSignUp'
            application/xml:
              schema:
                $ref: '#/components/schemas/UsersSignUp'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UsersSignUp'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSignUp'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UsersSignUp'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSignUp'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UsersSignUp'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
          application/xml:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsersSignUp'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    UsersSignUp:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 66dea455dcc977cba737e5a5
        name:
          type: string
          example: test
        email:
          type: string
          example: test@email.com
        isAdmin: 
          type: boolean 
        phone:
          type: string
          example: '12345'

    UsersLogin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 66dea455dcc977cba737e5a5
        access_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2Y2UzM2NjZGE4MWI3MGNjY2U1NjQ3NCIsImVtYWlsIjoidGVzdEBnbWFpbC5jb20iLCJwYXNzd29yZCI6IiQyYSQxMCRaSGM3SWNYY3VrMHlEMTVlVVlyMC51emYxSUg4Q2RaYWx2ZE56ZXVDUFA4OFh1bTJ0TWM2aSIsImlhdCI6MTcyNjU5NTI4MywiZXhwIjoxNzI2NTk4ODgzfQ.Om-owkmtonNDRKav2rf0g6Vwi_ELGh3qeDoPcP_QCho'
        isAdmin: 
          type: boolean
        email:
          type: string
          example: test@email.com
        name:
          type: string
          example: test     
    
    UsersUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 66dea455dcc977cba737e5a5
        name:
          type: string
          example: Dung
        email:
          type: string
          example: test@email.com
        isAdmin: 
          type: boolean 
        phone:
          type: string
          example: '12345'
        bio:
          type: string
          example: 'Toi la tac gia'
        birthday:
          type: string
          example: '2003-02-17'
    author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 66dea455dcc977cba737e5a5
        name:
          type: string
          example: Dung
        email:
          type: string
          example: test@email.com
    posts:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 66dea455dcc977cba737e5a5
        title:
          type: string
          example: IT
        cover: 
          type: string
          example: logo.jpg
        tags:
          type: string
          description: tag of posts
          example: tags
          enum:
            - tag1
            - tag2
            - tag3
        short_description:
          type: string
          example: IT vua cua moi nghe
        author: 
          type: array
          items:
            $ref: '#/components/schemas/author'
    
    PageNumber: 
      type: object
      properties:
        status:
          type: boolean
          example: true
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        posts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "641ec5b5e3c4b2a456aa01f9"
              title:
                type: string
                example: "How to Learn React"
              cover:
                type: string
                example: "react.png"
              tags:
                type: array
                items:
                    type: string
                    example: ["React", "JavaScript", "Frontend"]
              short_description:
                type: string
                example: "This is a guide to learning React." 
    updatePost:
      type: object
      properties:
        title:
          type: string
          description: Title of the blog post
          example: "Updated Blog Post Title"
        content:
          type: string
          description: The content of the blog post
          example: "This is the updated content of the blog post."
        cover:
          type: string
          description: URL or path to the cover image
          example: "react.png"
        tags:
          type: array
          items:
            type: string
            description: List of tags associated with the blog post
            example: ["React", "JavaScript", "Programming"]
        short_description:
          type: string
          description: Short description of the blog post
          example: "This is an updated short description."
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UsersSignUp'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header